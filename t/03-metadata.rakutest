use Test;
use SBOM::Raku <metadata metadata-hash from-json>;

my constant $version = SBOM::Raku.^ver.Str;
my $timestamp       := DateTime.now.Str.subst("Z","+00:00");

my $io   := $*PROGRAM.parent.sibling("META6.json");
my $meta := $io.slurp;

sub metadata-ok($metadata, $source) is test-assertion {
    subtest "testing metadata from $source" => {
        plan 2;
        isa-ok $metadata, SBOM::Metadata;
        my $got      := $metadata.JSON;
        my $expected := Q:s:to|JSON|.chomp;
{
  "timestamp": "$timestamp",
  "lifecycles": [
    {
      "phase": "build"
    }
  ],
  "authors": [
    {
      "bom-ref": "ElizabethMattijsenlizrakurocks",
      "name": "Elizabeth Mattijsen",
      "email": "liz@raku.rocks"
    }
  ],
  "component": {
    "type": "library",
    "mime-type": "text/plain",
    "bom-ref": "pkg:raku/zef:lizmat/SBOM::Raku@$version",
    "authors": [
      {
        "bom-ref": "ElizabethMattijsenlizrakurocks",
        "name": "Elizabeth Mattijsen",
        "email": "liz@raku.rocks"
      }
    ],
    "publisher": "zef",
    "group": "zef:lizmat",
    "name": "SBOM::Raku",
    "version": "$version",
    "description": "Raku specific SBOM functionality",
    "scope": "required",
    "licenses": [
      {
        "license": {
          "id": "Artistic-2.0",
          "acknowledgement": "declared",
          "url": "https://spdx.org/licenses/Artistic-2.0.json"
        }
      }
    ],
    "purl": "pkg:raku/zef:lizmat/SBOM::Raku@$version",
    "externalReferences": [
      {
        "url": "https://raku.land/zef:lizmat/SBOM::Raku?v=$version",
        "type": "documentation"
      },
      {
        "url": "https://github.com/lizmat/SBOM-Raku",
        "type": "distribution"
      },
      {
        "url": "https://github.com/lizmat/SBOM-Raku/issues",
        "type": "issue-tracker"
      },
      {
        "url": "https://github.com/lizmat/SBOM-Raku/archive/refs/tags/$version.zip",
        "type": "source-distribution"
      },
      {
        "url": "https://spdx.org/licenses/Artistic-2.0.json",
        "type": "license"
      }
    ],
    "tags": [
      "SBOM",
      "RAKU",
      "META"
    ]
  },
  "licenses": [
    {
      "license": {
        "id": "Artistic-2.0",
        "acknowledgement": "declared",
        "url": "https://spdx.org/licenses/Artistic-2.0.json"
      }
    }
  ]
}
JSON
        unless ok $got eq $expected, 'did we get the correct JSON' {
            my @expected = $expected.lines;
            for $got.lines.kv -> $i, $line {
                if $line ne @expected[$i] {
                    say "- @expected[$i]\n+ $line";
                    last;
                }
            }
        }
    }
}

plan 4;

metadata-ok metadata($io, :$timestamp, :raw-error), "io";

my %meta := from-json $meta, :immutable;
metadata-ok metadata(%meta, :$timestamp, :raw-error), "io/hash";

my %args := metadata-hash($io, :$timestamp, :raw-error);
metadata-ok SBOM::Metadata.new(:raw-error, |%args), "io/args";

%args := metadata-hash(%meta, :$timestamp, :raw-error);
metadata-ok SBOM::Metadata.new(:raw-error, |%args), "meta/args";

# vim: expandtab shiftwidth=4
