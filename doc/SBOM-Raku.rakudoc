=begin pod

=head1 NAME

SBOM::Raku - Raku specific SBOM functionality 

=head1 SYNOPSIS

=begin code :lang<raku>
use SBOM::Raku;

say source-sbom("META6.json").JSON;
# {
#   "bomFormat": "CycloneDX",
#   "specVersion": "1.6",
#   "version": 1,
#   "metadata": {
#     "timestamp": "2025-07-22T18:39:29.458604+02:00",
# ...
=end code

=head1 DESCRIPTION

The C<SBOM::Raku> distribution provides logic for the creation and
maintenance of SBOM (Software Bill Of Materials) files in the Raku
Programming Language context.

=head1 SELECTIVE IMPORTING

=begin code :lang<raku>
use SBOM::Raku <component>;  # only import "component"
=end code

By default all utility functions are exported.  But you can limit this to
the functions you actually need by specifying the names in the C<use>
statement.

To prevent name collisions and/or import any subroutine with a more
memorable name, one can use the "original-name:known-as" syntax.  A
semi-colon in a specified string indicates the name by which the subroutine
is known in this distribution, followed by the name with which it will be
known in the lexical context in which the C<use> command is executed.

=begin code :lang<raku>
use String::Utils <component:comp>;  # import "component" as "comp"
say comp |%args;
=end code

Apart from the subroutines provided by the C<SBOM::Raku> distribution,
it also possible to import the following subroutines from other packages,
but which are used internally by C<SBOM::Raku>:

=item JSON::Fast: from-json to-json
=item Identity::Utils: auth build compunit ecosystem is-pinned raku-land-url short-name ver
=item String::Utils: sha1

=head1 SUBROUTINES

=head2 authors

=begin code :lang<raku>
dd authors(from-json "META6.json".IO.slurp);
# (SBOM::Contact.new(|Map.new((:name("Jane Doe")))),)
=end code

The C<authors> subroutine returns a C<List> with C<SBOM::Contact>
objects for the authors of the JSON hash from a META6.json file.

=head2 component

=begin code :lang<raku>
say component("META6.json").JSON;
# {
#   "type": "library",
#   "mime-type": "text/plain",
# ...

my %meta-json = ...;
my $component = component(%meta-json);
=end code

The C<component> subroutine returns a
L<SBOM::Component|https://raku.land/zef:lizmat/SBOM::CycloneDX#sbomcomponent>
for the given arguments.

The arguments can be either an C<IO::Path> object (or a string that can
be coerced to an C<IO::Path>) to a file that contains Raku module meta
information (usually called C<META6.json>).  Or a hash with arguments
(in the C<META6.json> format) to build an C<SBOM::Component> object with.

=head2 component-hash

=begin code :lang<raku>
my %args := component-hash("META6.json");
# ... perform tweaks
my $component = SBOM::Component.new(|%args);
=end code

The C<component-hash> subroutine returns a hash in the format needed to
create an C<SBOM::Component> object with, from a C<META6.json> file (or
a hash of that representation).

It's main intended use is to be able to tweak the arguments prior to
making an C<SBOM::Component> object.

=head2 licenses

=begin code :lang<raku>
dd licenses(from-json "META6.json".IO.slurp);
# (SBOM::License.new(|Map.new((:license(Map.new((:id("Artistic-2.0"))))))),)
=end code

The C<licenses> subroutine returns a C<List> with C<SBOM::License>
objects for the license(s) of the JSON hash from a META6.json file.

=head2 metadata

=begin code :lang<raku>
say metadata("META6.json").JSON;
# {
#   "timestamp": "2025-07-22T18:52:04.686316+02:00",
#   "lifecycles": [
#     {
#       "phase": "build"
# ...

my %meta-json = ...;
my $metadata = metadata(%meta-json);
=end code

The C<metadata> subroutine returns a
L<SBOM::Metadata|https://raku.land/zef:lizmat/SBOM::CycloneDX#sbommetadata>
for the given arguments.

The arguments can be either an C<IO::Path> object (or a string that can
be coerced to an C<IO::Path>) to a file that contains Raku module meta
information (usually called C<META6.json>).  Or a hash with arguments
(in the C<META6.json> format) to build an C<SBOM::Metadata> object with.

=head2 metadata-hash

=begin code :lang<raku>
my %args := metadata-hash("META6.json");
# ... perform tweaks
my $metadata = SBOM::Metadata.new(|%args);
=end code

The C<metadata-hash> subroutine returns a hash in the format needed to
create an C<SBOM::Metadata> object with, from a C<META6.json> file (or
a hash of that representation).

It's main intended use is to be able to tweak the arguments prior to
making an C<SBOM::Metadata> object.

=head2 source-sbom

=begin code :lang<raku>
say source-sbom("META6.json").JSON;
# {
#   "bomFormat": "CycloneDX",
#   "specVersion": "1.6",
#   "version": 1,
#   "metadata": {
#     "timestamp": "2025-07-22T18:53:59.841267+02:00",
# ...

my %meta-json = ...;
my $sbom = source-sbom(%meta-json);
=end code

The C<source-sbom> subroutine returns a
L<SBOM::CycloneDX|https://raku.land/zef:lizmat/SBOM::CycloneDX#sbomcyclonedx>
for the given arguments.

The arguments can be either an C<IO::Path> object (or a string that can
be coerced to an C<IO::Path>) to a file that contains Raku module meta
information (usually called C<META6.json>).  Or a hash with arguments
(in the C<META6.json> format) to build an C<SBOM::CycloneDX> object with.

=head2 source-sbom-hash

=begin code :lang<raku>
my %args := source-sbom-hash("META6.json");
# ... perform tweaks
my $sbom = SBOM::CycloneDX.new(|%args);
=end code

The C<source-sbom-hash> subroutine returns a hash in the format needed to
create an C<SBOM::CycloneDX> object with, from a C<META6.json> file (or
a hash of that representation).

It's main intended use is to be able to tweak the arguments prior to
making an C<SBOM::CycloneDX> object.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

=head1 COPYRIGHT AND LICENSE

Copyright 2025 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
